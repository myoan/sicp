#lang racket

; Continued fraction
(define tolerance 0.000001)
(define (fixed-point f first-guess)
	(define (close-enough? v1 v2)
		(< (abs (- v1 v2)) tolerance))
	(define (try guess)
		(let ((next (f guess)))
			(if (close-enough? guess next)
			next
			(try next))))
	(try first-guess))

(define (cont-frac n d k)
	(define (cont-frac-recur a b)
		(if (> a b)
			1
			(/ (n a) (+ (d a) (cont-frac-recur (+ a 1) b)))))
	(cont-frac-recur 1 k))

(define (cont-frac-iter n d k)
	(define (iter cnt result)
		(if (> cnt k)
			result
			(iter (+ cnt 1) (/ (n cnt) (+ (d cnt) result)))))
	(iter 1 1))

(define (gold-ratio-by-cont-frac k)
	(/ 1 (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) k)))

(define (gold-ratio-by-cont-frac-iter k)
	(/ 1 (cont-frac-iter (lambda (i) 1.0) (lambda (i) 1.0) k)))

(define (gold-ratio n)
	(fixed-point (lambda (x) (+ 1 (/ 1.0 x))) n))

(display "fixed-point: golden-ratio: ")
(display (gold-ratio 1.0))
(newline)

(display "gold-ratio-by-cont-frac(1):       ")
(display (gold-ratio-by-cont-frac 1))
(newline)
(display "gold-ratio-by-cont-frac-iter(1):  ")
(display (gold-ratio-by-cont-frac-iter 1))
(newline)
(display "gold-ratio-by-cont-frac(2):       ")
(display (gold-ratio-by-cont-frac 2))
(newline)
(display "gold-ratio-by-cont-frac-iter(2):  ")
(display (gold-ratio-by-cont-frac-iter 2))
(newline)
(display "gold-ratio-by-cont-frac(3):       ")
(display (gold-ratio-by-cont-frac 3))
(newline)
(display "gold-ratio-by-cont-frac-iter(3):  ")
(display (gold-ratio-by-cont-frac-iter 3))
(newline)
(display "gold-ratio-by-cont-frac(10):      ")
(display (gold-ratio-by-cont-frac 10))
(newline)
(display "gold-ratio-by-cont-frac-iter(10): ")
(display (gold-ratio-by-cont-frac-iter 10))
(newline)
(display "gold-ratio-by-cont-frac(11):      ")
(display (gold-ratio-by-cont-frac 11))
(newline)
(display "gold-ratio-by-cont-frac-iter(11): ")
(display (gold-ratio-by-cont-frac-iter 11))
(newline)
