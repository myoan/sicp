#lang racket

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
	(and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (make-sum a1 a2)
	(cond
		((=number? a1 0) a2)
		((=number? a2 0) a1)
		((and (number? a1) (number? a2))
			(+ a1 a2))
		(else (list '+ a1 a2))))
(define (=number? exp num) (and (number? exp) (= exp num)))
(define (make-product m1 m2)
	(cond
		((or (=number? m1 0) (=number? m2 0)) 0)
		((=number? m1 1) m2)
		((=number? m2 1) m1)
		((and (number? m1) (number? m2)) (* m1 m2))
		(else (list '* m1 m2))))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))

(define (deriv exp var)
	(cond ((number? exp) 0)
		((variable? exp) (if (same-variable? exp var) 1 0))
		((sum? exp) (make-sum
			(deriv (addend exp) var)
			(deriv (augend exp) var)))
		((product? exp)
			(make-sum
				(make-product (multiplier exp)
					(deriv (multiplicand exp) var))
				(make-product (deriv (multiplier exp) var)
					(multiplicand exp))))
		((exponentiation? exp)
			(make-product (exponent exp)
				(make-exponent (base exp) (- (exponent exp) 1))))
		(else (error "unknown expressioon type: DERIV" exp))))

(print (deriv '(+ x 3) 'x)) (newline)
(print (deriv '(* x y) 'x)) (newline)
(print (deriv '(* (* x y) (+ x 3)) 'x)) (newline)

(define (exponentiation? x) (and (pair? x) (eq? (car x) '**)))
(define (base x) (cadr x))
(define (exponent x) (caddr x))
(define (power b x)
	(if (< x 1)
		1
		(* b (power b (- x 1)))))
(define (make-exponent b e) 
	(cond
		((=number? b 0) 0)
		((=number? e 0) 1)
		((=number? e 1) b)
		((and (number? b) (number? e)) (power b e))
		(else (list '** b e))))

(print (deriv '(** x 2) 'x)) (newline)
(print (deriv '(** x 3) 'x)) (newline)